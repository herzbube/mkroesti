.. This document is UTF-8 encoded and marked up using reStructured text.

NAME
====

**mkroesti** - generate different kinds of hashes


SYNOPSIS
========

| **mkroesti** [**-e**] [**-a** *LIST*] [**-d**]
| **mkroesti** **-b** [**-a** *LIST*] [**-d**] *input*
| **mkroesti** **-f** *FILE* [**-a** *LIST*] [**-d**]
| **mkroesti** **-l**
| **mkroesti** **-V**
| **mkroesti** **-h**


DESCRIPTION
===========

The **mkroesti** command takes an input and generates different kinds of hashes from that input. Without special instructions, **mkroesti** takes its input either from standard input or asks for it interactively. Unless echo mode is enabled (**--echo**), **mkroesti** does not display input typed by the user, assuming that the user enters a secret password.

Additional sources for the input are: a file (**--file**) or the command line (**--batch**). Note that the latter option should be used with extreme care, since if the input is a password, it will be visible to any programm or user looking at the system's list of processes at that time.

The user usually specifies one or more algorithms (**--algorithms**) that should be used to generate hashes. If no specific algorithm is selected, **mkroesti** generates hashes for all algorithms that it knows about.


OPTIONS
=======

-a LIST, --algorithms LIST
  Comma separated list of algorithms and/or aliases that should be used to generate hashes. See **ALGORITHMS** and **ALIASES** below.

-b, --batch
  Use batch mode; i.e., get the input from the command line rather than prompting for it. This option should be used with extreme care, since if the input is a password, it will be visible to any program or user looking at the system's list of processes at that time.

-d, --duplicate-hashes
  Allow duplicate hashes; i.e. if the same algorithm is available from multiple implementation sources, generate a hash for each implementation.

-e, --echo
  Enable echo mode; i.e. when the user is prompted for input, the characters she types are echoed on the screen. This option cannot be combined with **--batch** or **--file**.

-f FILE, --file FILE
  Read the input from **FILE**.

-l, --list
  List all supported algorithms, together with the information which algorithms are actually available, and which implementation sources exist for them.

-V, --version
  Print the version number.

-h, --help
  Show a short usage summary.       


ALGORITHMS
==========

**mkroesti** defines the following keywords to identify distinct hash algorithms:

base16
  Base16 encoding as specified in RFC 3548. Strictly speaking, this is not a hash but an encoding.
base32
  Base32 encoding as specified in RFC 3548. Strictly speaking, this is not a hash but an encoding.
base64
  Base64 encoding as specified in RFC 3548. Strictly speaking, this is not a hash but an encoding.
adler32
  Adler-32 checksum. Strictly speaking, this is not a hash but a checksum.
crc32
  CRC-32 checksum. Strictly speaking, this is not a hash but a checksum.
crc32b
  .. empty definition
crypt-system
  Local crypt() system call. Note that crypt hashes are salted, i.e. repeated calls with the same input will yield different results.
crypt-md5
  MD5-based crypt (hash starts with **$1$**). Note that crypt hashes are salted, i.e. repeated calls with the same input will yield different results.
crypt-apr1
  MD5-based crypt, Apache variant (hash starts with **$apr1$**). Note that crypt hashes are salted, i.e. repeated calls with the same input will yield different results.
crypt-blowfish
  blowfish-based crypt (hash starts with **$2a$**). Note that crypt hashes are salted, i.e. repeated calls with the same input will yield different results.
md2
  Message-Digest algorithm 2.
md4
  Message-Digest algorithm 4, produces a 128 bit hash.
md5
  Message-Digest algorithm 5, produces a 128 bit hash.
sha-0
  The original SHA algorithm. Superseded by **sha-1**.
sha-1
  SHA-1 algorithm, produces a 160 bit hash. Supersedes **sha-0**.
sha-224
  SHA-2 algorithm, produces a 224 bit hash.
sha-256
  SHA-2 algorithm, produces a 256 bit hash.
sha-384
  SHA-2 algorithm, produces a 384 bit hash.
sha-512
  SHA-2 algorithm, produces a 512 bit hash.
ripemd-original
  The original RIPEMD algorithm. Superseded by **ripemd-160**.
ripemd-128
  RIPEMD algorithm, produces a 128 bit hash.
ripemd-160
  RIPEMD algorithm, produces a 160 bit hash. Supersedes **ripemed**.
ripemd-256
  RIPEMD algorithm, produces a 256 bit hash.
ripemd-320
  RIPEMD algorithm, produces a 320 bit hash.
haval-128-[345]
  HAVAL algorithm, produces a 128 bit hash. The number of rounds is either 3, 4 or 5.
haval-160-[345]
  HAVAL algorithm, produces a 160 bit hash. The number of rounds is either 3, 4 or 5.
haval-192-[345]
  HAVAL algorithm, produces a 192 bit hash. The number of rounds is either 3, 4 or 5.
haval-224-[345]
  HAVAL algorithm, produces a 224 bit hash. The number of rounds is either 3, 4 or 5.
haval-256-[345]
  HAVAL algorithm, produces a 256 bit hash. The number of rounds is either 3, 4 or 5.
whirlpool
  WHIRLPOOL algorithm.
tiger-128
  Tiger algorithm, produces a 128 bit hash.
tiger-160
  Tiger algorithm, produces a 160 bit hash.
tiger-192
  Tiger algorithm, produces a 192 bit hash. This is the variant commonly used, and commonly referred to as "Tiger".
tiger2
  .. empty definition
snefru-128
  Snefru algorithm, produces a 128 bit hash.
snefru-256
  Snefru algorithm, produces a 256 bit hash.
gost
  GOST algorithm, produces a 256 bit hash.
windows-lm
  The Windows LanManager password hash.
windows-nt
  The Windows NT password hash.
mysql-password
  MySQL's PASSWORD() function.


ALIASES
=======

**mkroesti** defines the following aliases to refer to sets of hash algorithms:

all
  All algorithms known to **mkroesti**. The default if **--algorithms** is not specified.
chksum
  All algorithms that produce a checksum instead of a hash.
encoding
  All algorithms that produce an encoding instead of a hash.
crypt
  All algorithms that produce hash based on crypt().
sha
  All SHA (Secure Hash Algorithm) algorithms.
ripemd
  All RIPEMD (RACE Integrity Primitives Evaluation Message Digest) algorithms.
haval
  All HAVAL algorithms.
tiger
  All Tiger algorithms.
snefru
  All Snefru algorithms.


EXAMPLES
========

(1) Prompt the user to interactively provide the input, not echoing the input on the screen. Hashes for all algorithms are generated.

  **mkroesti** 


(2) Take the input from file *foo* and generate hashes for the algorithms **md5**, **sha-1** and **haval-128** (4 rounds variant)

  **mkroesti** **-f** *foo* **-a** **md5**,**sha-1**,**haval-128-4**


(3) Take the input from standard input and generate a single hash using the local crypt() system function

  **cat** foo | **mkroesti** **-a** **crypt-system**


(4) Use the string *secret* as input and generate hashes for all algorithms of the SHA and RIPEMD family.

  **mkroesti** **-b** **-a** **sha**,**ripemd** *secret*


EXIT CODES
==========

| 0  success
| 1  runtime error
| 2  error during parsing of command line arguments


BUGS
====

**mkroesti** is not good at handling large files, because it tries to read its entire input into memory.

**mkroesti** does nothing at all about string encodings; if in doubt assume the worst.

If you find any other bugs, please report them to <**mkroesti**@herzbube.ch>.


DEPENDENCIES
============

**mkroesti** depends on the following Python modules:

base64
  From the Python Standard Library
hashlib
  From the Python Standard Library
crypt
  From the Python Standard Library
random
  From the Python Standard Library
string
  From the Python Standard Library
smbpasswd
  See http://barryp.org/software/py-smbpasswd/
mhash
  See http://labix.org/python-mhash
bcrypt
  See http://www.mindrot.org/projects/py-bcrypt/


SEE ALSO
========

-


AUTHOR
======

Patrick NÃ¤f (herzbube@herzbube.ch)


LICENSE
=======

GPLv3
