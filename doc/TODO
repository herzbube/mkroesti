Purpose of this document
------------------------
This document contains a list of minor features and technical stuff that should
be implemented when time permits it. The TODO list is updated frequently as new
ideas crop up during programming.

For a broader view of how the project will develop over time, you should see
the Roadmap document.


Priority 1 (important)
----------------------
- use third-party source and check whether the test result files in
  tests/testdata/result contain the correct hash values
- test with Python 2.6 what works and what doesn't after Python 3 changes have
  been implemented; things that probably need fixing: handling of text vs. data
  (i.e. usage of the Python 3 type "bytes"); things that should be ok: absolute
  imports; new "except as" syntax (should have been backported to Python 2.6; to
  which version? specify that version in the minimum requirements section in
  README); print() as a function (we use "from __future import"); handling of
  dict.keys(); replacement of callable() by hasattr()
- check if all algorithms return the correct value for needBytesInput()
- experiment how getpass.getpass() interprets the user input; it is currently
  assumed that it uses the current default encoding; an interesting experiment
  would be one where the default encoding is different from what user input
  actually provides, e.g. user input provides UTF-8 but default encoding is
  something like ISO8859-1; write down the results in the Research
- add support for encodings in Python 2.6; if not possible, find the
  limitations and specify them in README and MANUAL
- check if in Python 2.6 sys.stdin.buffer exists and can be used in the same
  way as in Python 3 to read binary data
- fix TODOs in the code
- add more tests
  - write a test case class that accepts a provider in its __init__ and then
    goes on to exercise the provider to make sure that its implementation is
    valid
    -> subclass the testcase and exercise the various concrete providers
  - test deep copying? e.g. provider.getAliasNames() should return a list that
    we can modify, but the next call should return the same list
  - write a test that uses AlgorithmStub and ProviderStub to exercise some
    functionality; see helper setUpProviderStub()


Priority 2 (nice to have)
-------------------------
- try to improve handling of large inputs
- find out why adler32 and crc32 checksums (provided by zlib module) are not correct
  - adler32 for "foo": expected = 45018202 (hex, i.e. dec = 1157726722), actual = 42074437 (dec)
  - crc32 for "foo": expected = A5C4FE49 (hex, i.e. dec = 2781150793), actual = -1938594527 (dec)
  - see issue 1202: http://bugs.python.org/issue1202
    - as per standard, the result should always be an unsigned number
    - python 2.x implementation always returns a signed number


Priority 3 (not important)
-------------------------
- register with PyPI
- check whether in Python 3 the command "python setup.py test --help" still
  prints out the command class' name instead of the command name string used
  to setup the command; file a bug with Distutils if this problem still persists 
