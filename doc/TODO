* prepare project for going public
  * write ReleaseSteps
  * write INSTALL
  * improve README
    * add section "How to extend mkroesti" to README
    * add section "How to test" to README
    * add section "How to generate documentation" to README
    * add section "Dependencies" to README
    * add contact information (recommended by GPL Howto)
  * fix MANUAL so that a proper man page can be generated from it
  * add a nice "long description" to setup.py
  * determine and document what is the minimum required version of Python for mkroesti
* go public
  * create a web page
  * register with PyPI?
* TODOs in the code
* try to improve handling of large inputs
* find out why adler32 and crc32 checksums (provided by zlib module) are not correct
  * adler32 for "foo": expected = 45018202 (hex, i.e. dec = 1157726722), actual = 42074437 (dec)
  * crc32 for "foo": expected = A5C4FE49 (hex, i.e. dec = 2781150793), actual = -1938594527 (dec)
  * see issue 1202: http://bugs.python.org/issue1202
    * as per standard, the result should always be an unsigned number
    * python 2.x implementation always returns a signed number
* implement missing hashes
  * crypt-apr1
  * crypt-md5
  * ripemd ("ripemd" currently is an alias)
  * haval-*-[45]
    * http://www.theserverpages.com/php/manual/en/ref.mhash.php
  * tiger2
  * mysql-passwd
* add even more hashes
  * HAS-160
  * MDC-2 (probably provided by hashlib)
  * N-Hash
  * RadioGatÃºn
  * HAS-V
  * MASH-1, MASH-2
  * hashemall.com has "3 passes" and "4 passes" variants of tiger-128/160/192; mkroesti currently provides the "3 passes" variant only
* add more tests
  * write a testcase class that accepts a provider in its __init__ and then goes on to exercise the provider to make sure that its implementation is valid
    -> subclass the testcase and exercise the various concrete providers
  * test deep copying? e.g. provider.getAliasNames() should return a list that we can modify, but the next call should return the same list
  * write a test that uses AlgorithmStub and ProviderStub to exercise some functionality; see helper setUpProviderStub() 