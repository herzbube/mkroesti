Purpose of this document
------------------------
This document contains a list of minor features and technical stuff that should
be implemented when time permits it. The TODO list is updated frequently as new
ideas crop up during programming.

For a broader view of how the project will develop over time, you should see
the Roadmap document.


Priority 1 (important)
----------------------
- mkroesti.aprutil extension module
  - find a way how to use the system version of apr-util on my Mac; the custom
    installed version of Python 3 (/Library/Frameworks/Python.framework/Versions/3.0)
    adds the argument "-isysroot /Developer/SDKs/MacOSX10.4u.sdk" to the gcc
    command line, which makes the regular system apr-util (header files in
    /usr/include/apr-1, library file in /usr/lib) invisible to the build
    process
  - specify dependency from apr-util in README
  - fix aprutil.c so that it conforms to the Python 2.6 interface; see the
    HOWTO "Porting Extension Modules to 3.0" in the Python 3.0 docs
- use third-party source and check whether the test result files in
  tests/testdata/result contain the correct hash values
- test with Python 2.6 what works and what doesn't after Python 3 changes have
  been implemented; things that probably need fixing: handling of text vs. data
  (i.e. usage of the Python 3 type "bytes"); things that should be ok: absolute
  imports; new "except as" syntax (should have been backported to Python 2.6; to
  which version? specify that version in the minimum requirements section in
  README); print() as a function (we use "from __future import"); handling of
  dict.keys(); replacement of callable() by hasattr()
- check if all algorithms return the correct value for needBytesInput()
- experiment how getpass.getpass() interprets the user input; it is currently
  assumed that it uses the current default encoding; an interesting experiment
  would be one where the default encoding is different from what user input
  actually provides, e.g. user input provides UTF-8 but default encoding is
  something like ISO8859-1; write down the results in the Research
- add support for encodings in Python 2.6; if not possible, find the
  limitations and specify them in README and MANUAL
- check if in Python 2.6 sys.stdin.buffer exists and can be used in the same
  way as in Python 3 to read binary data
- fix TODOs in the code


Priority 2 (nice to have)
-------------------------
- try to improve handling of large inputs
- find out why adler32 and crc32 checksums (provided by zlib module) are not correct
  - adler32 for "foo": expected = 45018202 (hex, i.e. dec = 1157726722), actual = 42074437 (dec)
  - crc32 for "foo": expected = A5C4FE49 (hex, i.e. dec = 2781150793), actual = -1938594527 (dec)
  - see issue 1202: http://bugs.python.org/issue1202
    - as per standard, the result should always be an unsigned number
    - python 2.x implementation always returns a signed number
- file a bug with Distutils: "./setup.py test -h" uses the command class' name
  in its output. The correct thing to do would be to use the key of the
  cmdclass dictionary specified to the setup() function. For instance,
  "./setup.py --help-commands" uses the correct name. The issue here is that I
  am forced to choose a class name that is suitable for display to the user.
  The reported behaviour exists in Python 2.5, Python 2.6 and Python 3.0.


Priority 3 (not important)
-------------------------
- register with PyPI
